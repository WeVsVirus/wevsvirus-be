{"version":3,"sources":["webpack:///src/app/questionnaire/form/form.component.ts","webpack:///src/app/questionnaire/form/form.component.html","webpack:///src/app/questionnaire/health/health.component.ts","webpack:///src/app/questionnaire/health/health.component.html","webpack:///src/app/questionnaire/questionnaire-routing.module.ts","webpack:///src/app/questionnaire/questionnaire.module.ts","webpack:///src/app/questionnaire/questionnaire.page.html","webpack:///src/app/questionnaire/questionnaire.page.ts","webpack:///src/app/services/question.service.ts","webpack:///src/app/services/questionnaire.service.ts"],"names":["QuestFormComponent","questionService","questions","onChange","getAllMoodQuestions","id","value","emit","map","q","selector","templateUrl","styleUrls","QuestHealthComponent","getAllHealthQuestions","slider","n","Date","setMinutes","el","shadowRoot","querySelector","innerHTML","toTimeString","slice","hours","minutes","routes","path","component","QuestionnairePageRoutingModule","forChild","imports","exports","QuestionnairePageModule","declarations","QuestionnairePage","userService","questService","moode","state","userId","user","responseDate","toISOString","substring","moodResponses","healthResponses","event","questionId","response","save","moodQuestions","question","emoji","healthQuestions","QuestionService","providedIn","QuestionnaireService","http","baseUrl","window","location","hostname","questionnaire","post","toPromise"],"mappings":"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","file":"questionnaire-questionnaire-module-es5.js","sourcesContent":["import {Component, EventEmitter, Output, OnInit} from '@angular/core';\nimport {MoodQuestion, QuestionService} from '../../services/question.service';\n\n\n\n@Component({\n    selector: 'quest-form',\n    templateUrl: './form.component.html',\n    styleUrls: ['./form.component.scss'],\n})\nexport class QuestFormComponent implements OnInit {\n\n    public questions: MoodQuestion[] = [];\n\n    constructor(private readonly questionService: QuestionService) {\n    }\n\n    ngOnInit() {\n        this.questions = this.questionService.getAllMoodQuestions();\n    }\n\n    @Output()\n    public readonly onChange = new EventEmitter<MoodQuestion[]>();\n\n    onRangeChange(id: string, value: number) {\n        this.onChange.emit(this.questions.map(q => {\n            if (q.id === id) {\n                q.value = value;\n            }\n\n            return q;\n        }));\n    }\n\n}\n","<ion-grid>\n    <ion-row *ngFor=\"let q of questions\">\n        <ion-col size=\"12\">\n            <ion-item-divider>\n                <ion-label>\n                    {{q.question}}\n                </ion-label>\n            </ion-item-divider>\n        </ion-col>\n        <ion-col size=\"12\">\n            <ion-range color=\"danger\" pin=\"true\" (ionChange)=\"onRangeChange(q.id, $event.detail.value)\">\n                <ion-label slot=\"start\" class=\"emoji\">0️⃣</ion-label>\n                <ion-label slot=\"end\" class=\"emoji\">{{q.emoji}}</ion-label>\n            </ion-range>\n        </ion-col>\n    </ion-row>\n</ion-grid>\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {HealthQuestion, QuestionService} from '../../services/question.service';\n\n@Component({\n    selector: 'quest-health',\n    templateUrl: './health.component.html',\n    styleUrls: ['./health.component.scss'],\n})\nexport class QuestHealthComponent implements OnInit {\n\n    public questions: HealthQuestion[] = [];\n\n    constructor(private readonly questionService: QuestionService) {\n    }\n\n    @Output()\n    public readonly onChange = new EventEmitter<HealthQuestion[]>();\n\n    ngOnInit() {\n        this.questions = this.questionService.getAllHealthQuestions();\n    }\n\n    onRangeChange(slider, id: string, value: HealthQuestion['value']) {\n\n        const n = new Date(0, 0);\n        n.setMinutes(slider.value as number);\n\n        slider\n            .el.shadowRoot\n            .querySelector('.range-knob-handle .range-pin')\n            .innerHTML = n.toTimeString().slice(0, 5);\n\n        this.onChange.emit(this.questions.map(q => {\n            if (q.id === id) {\n                q.value = {\n                    hours: value as any,\n                    minutes: 0,\n                };\n            }\n\n            return q;\n        }));\n    }\n\n}\n","<ion-grid>\n    <ion-row *ngFor=\"let q of questions\">\n        <ion-col size=\"12\">\n            <ion-item-divider>\n                <ion-label>\n                    {{q.question}}\n                </ion-label>\n            </ion-item-divider>\n        </ion-col>\n        <ion-col size=\"12\">\n            <ion-range #slider color=\"danger\" pin=\"true\" [max]=\"1200\" [step]=\"15\" [snaps]=\"true\"\n                       (ionChange)=\"onRangeChange(slider, q.id, $event.detail.value)\">\n                <ion-label slot=\"start\" class=\"emoji\">0️⃣</ion-label>\n                <ion-label slot=\"end\" class=\"emoji\">{{q.emoji}}</ion-label>\n            </ion-range>\n        </ion-col>\n    </ion-row>\n</ion-grid>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QuestionnairePage } from './questionnaire.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QuestionnairePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class QuestionnairePageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {QuestionnairePageRoutingModule} from './questionnaire-routing.module';\n\nimport {QuestionnairePage} from './questionnaire.page';\nimport {QuestFormComponent} from './form/form.component';\nimport {QuestHealthComponent} from './health/health.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    QuestionnairePageRoutingModule\n  ],\n  declarations: [QuestionnairePage, QuestFormComponent, QuestHealthComponent]\n})\nexport class QuestionnairePageModule {}\n","<ion-header>\n    <ion-toolbar>\n        <ion-title>questionnaire</ion-title>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n    <ion-grid>\n        <ion-col size=\"12\">\n            <ion-item>\n                <ion-label>Mood enabled:</ion-label>\n                <ion-toggle color=\"primary\" [(ngModel)]=\"moode\" [value]=\"'mood'\"></ion-toggle>\n            </ion-item>\n        </ion-col>\n    </ion-grid>\n\n    <ng-container [ngSwitch]=\"moode\">\n        <quest-form *ngSwitchCase=\"true\" (onChange)=\"onMoodResponse($event)\"></quest-form>\n        <quest-health *ngSwitchDefault=\"false\" (onChange)=\"onHealthResponse($event)\"></quest-health>\n    </ng-container>\n</ion-content>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {IQuestionnaire, QuestionnaireService} from '../services/questionnaire.service';\nimport {UserService} from '../services/user.service';\nimport {MoodQuestion, HealthQuestion} from '../services/question.service';\n\n@Component({\n    selector: 'app-questionnaire',\n    templateUrl: './questionnaire.page.html',\n    styleUrls: ['./questionnaire.page.scss'],\n})\nexport class QuestionnairePage implements OnInit {\n\n    private state: IQuestionnaire;\n\n    @Input()\n    public moode = true;\n\n    constructor(\n        private readonly userService: UserService,\n        private readonly questService: QuestionnaireService,\n    ) {\n    }\n\n    ngOnInit() {\n        this.state = {\n            userId: this.userService.user.id,\n            responseDate: new Date().toISOString().substring(0, 10),\n            moodResponses: [],\n            healthResponses: [],\n        };\n    }\n\n    async onMoodResponse(event: MoodQuestion[]) {\n        this.state.moodResponses = event.map(({id, value}) => ({\n            questionId: id,\n            response: value,\n        }));\n\n        await this.questService.save(this.state);\n    }\n\n    async onHealthResponse(event: HealthQuestion[]) {\n        this.state.healthResponses = event.map(({id, value}) => ({\n            questionId: id,\n            response: value,\n        }));\n\n        await this.questService.save(this.state);\n    }\n\n}\n","import {Injectable} from '@angular/core';\n\nexport interface MoodQuestion {\n    id: string\n    question: string\n    emoji: string\n    value: number\n}\n\nexport interface HealthQuestion {\n    id: string\n    question: string\n    emoji: string\n    value: {\n        hours: number\n        minutes: number\n    }\n}\n\nconst moodQuestions: MoodQuestion[] = [{\n    id: '72eciMp5RMiA2u5dfwgtAX',\n    question: 'Wie gut geht es Dir?',\n    emoji: '🙂',\n    value: 0,\n}, {\n    id: 'oDHa9ZEb5KNChgmJ65fBx2',\n    question: 'Wie ängstlich fühlst Du Dich?',\n    emoji: '😳',\n    value: 0,\n}, {\n    id: 'rdjhVEbqnope4vL8MfAJ9Y',\n    question: 'Wie wütend bist Du?',\n    emoji: '😡',\n    value: 0,\n}, {\n    id: 'kcz8NZb2chFP1RiZdURTw2',\n    question: 'Wie einsam fühlst Du Dich?',\n    emoji: '🚶‍',\n    value: 0,\n}, {\n    id: 'o4uyZ9so3oiuAzspbH3YPf',\n    question: 'Wie gestresst fühlst Du Dich?',\n    emoji: '🤯',\n    value: 0,\n}, {\n    id: 'ggonDssvB639H2Bzbd4ac2',\n    question: 'Wie zufrieden bist Du?',\n    emoji: '😊',\n    value: 0,\n}];\n\nconst healthQuestions: HealthQuestion[] = [{\n    id: 'bJyjEuGz6VF3kwVxz7RQ8c',\n    question: 'Wie lange hast du geschlafen?',\n    emoji: '🌙',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: 'rPjhtwjTyfAQ433jVDHSvU',\n    question: 'Wie lange hast Du Dich heute über Corona informiert (Nachrichten, Social Media, TV..)',\n    emoji: '📰',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: '84rfLqZxi9X9Y8y9hQrLKB',\n    question: 'Wie lange hattest Du heute Kontakt zu Anderen (Telefon, Skype, persönlich)?',\n    emoji: '💬',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: 'vSvCia11kNsj43DVqiMNF9',\n    question: 'Wie lange warst Du heute an der frischen Luft?',\n    emoji: '🌤‍',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: 'bJyjEuGz6VF3kwVxz7RQ8c',\n    question: 'Wie lange hast Du heute Sport gemacht?',\n    emoji: '💪',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}];\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class QuestionService {\n\n    constructor() {\n    }\n\n    getAllMoodQuestions = () => moodQuestions;\n    getAllHealthQuestions = () => healthQuestions;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\nexport interface IQuestionnaire {\n    userId: string\n    responseDate: string // 2020-03-20\n    moodResponses: {\n        questionId: string\n        response: number\n    }[],\n    healthResponses: {\n        questionId: string\n        response: {\n            hours: number\n            minutes: number\n        }\n    }[]\n}\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class QuestionnaireService {\n\n    private readonly baseUrl = `http://${window.location.hostname}:8080`;\n\n    constructor(private http: HttpClient) {\n    }\n\n    async save(questionnaire: IQuestionnaire): Promise<IQuestionnaire> {\n        await this.http.post<IQuestionnaire>(this.baseUrl + '/questionnaire', questionnaire).toPromise();\n        return questionnaire\n    }\n}\n"]}