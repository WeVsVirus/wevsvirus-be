{"version":3,"sources":["./src/app/settings/settings.page.html","./src/app/settings/settings-routing.module.ts","./src/app/settings/settings.module.ts","./src/app/settings/settings.page.scss","./src/app/settings/settings.page.ts"],"names":[],"mappings":"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","file":"settings-settings-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n    <ion-header>\\n        <ion-toolbar>\\n            <ion-buttons slot=\\\"start\\\">\\n                <ion-menu-button></ion-menu-button>\\n            </ion-buttons>\\n            <ion-title>Einstellungen</ion-title>\\n        </ion-toolbar>\\n    </ion-header>\\n</ion-header>\\n\\n<ion-content>\\n    <form *ngIf=\\\"(settings$ | async) as settings\\\">\\n\\n        <ion-item-group>\\n\\n            <ion-item *ngIf=\\\"(user | async)?.id as userId\\\">\\n                <ion-label>\\n                    Deine Benutzer-ID<br/>\\n                </ion-label>\\n                <ion-badge (click)=\\\"copyUserIdToClipboard(userId)\\\">{{userId}}</ion-badge>\\n            </ion-item>\\n\\n            <ion-item>\\n                <ion-label>\\n                    Erinnerungsnachricht<br/>\\n                    <small>Gerne erinnern wir dich daran deine Stimmungs- und Aktivit√§tsfragen zu beantworten.</small>\\n                </ion-label>\\n                <ion-toggle\\n                        color=\\\"primary\\\"\\n                        name=\\\"reminderPushNotification.enabled\\\"\\n                        [value]=\\\"true\\\"\\n                        [checked]=\\\"settings.reminderPushNotification.enabled\\\"\\n                        (ionChange)=\\\"settingsService.set($event.target.name, $event.detail.checked)\\\"></ion-toggle>\\n            </ion-item>\\n\\n            <!--<ion-item [disabled]=\\\"!settings.enablePush\\\">\\n                <ion-label>\\n                    An welchen Tagen?\\n                </ion-label>\\n                <ion-select placeholder=\\\"Mo, Di, Mi, Do, Fr, Sa, So\\\" multiple>\\n                    <ion-select-option value=\\\"MO\\\">Mo</ion-select-option>\\n                    <ion-select-option value=\\\"DI\\\">Di</ion-select-option>\\n                    <ion-select-option value=\\\"MI\\\">Mi</ion-select-option>\\n                    <ion-select-option value=\\\"DO\\\">Do</ion-select-option>\\n                    <ion-select-option value=\\\"FR\\\">Fr</ion-select-option>\\n                    <ion-select-option value=\\\"SA\\\">Sa</ion-select-option>\\n                    <ion-select-option value=\\\"SO\\\">So</ion-select-option>\\n                </ion-select>\\n            </ion-item>-->\\n\\n            <ion-item [disabled]=\\\"!settings.reminderPushNotification.enabled\\\">\\n                <ion-label>\\n                    Um wie viel Uhr?\\n                </ion-label>\\n                <ion-datetime\\n                        display-format=\\\"HH:mm\\\"\\n                        picker-format=\\\"HH:mm\\\"\\n                        placeholder=\\\"20:00\\\"\\n                        [value]=\\\"settings.reminderPushNotification.time\\\"\\n                        (ionChange)=\\\"setReminderPushNotificationTime($event.target.value)\\\"></ion-datetime>\\n            </ion-item>\\n\\n        </ion-item-group>\\n\\n    </form>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPage } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingsPageRoutingModule } from './settings-routing.module';\n\nimport { SettingsPage } from './settings.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SettingsPageRoutingModule,\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n","export default \"ion-label small {\\n  display: inline-block;\\n  white-space: normal;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rc2NoZWNrZXIvUHJvamVjdHMvd2lydnN2aXJ1cy93aWVnZWh0cy9zcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLnBhZ2Uuc2NzcyIsInNyYy9hcHAvc2V0dGluZ3Mvc2V0dGluZ3MucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNFO0VBQ0UscUJBQUE7RUFDQSxtQkFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvc2V0dGluZ3Mvc2V0dGluZ3MucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWxhYmVsIHtcbiAgc21hbGwge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICB9XG59XG4iLCJpb24tbGFiZWwgc21hbGwge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG59Il19 */\"","import {Component} from '@angular/core';\nimport {ToastController} from '@ionic/angular';\n\nimport {UserService} from '../services/user.service';\nimport {Plugins} from '@capacitor/core';\nimport {SettingsService} from '../services/settings.service';\nimport {map} from 'rxjs/operators';\nimport {NotificationService} from '../services/notification.service';\n\nconst {Clipboard} = Plugins;\n\n@Component({\n    selector: 'app-settings',\n    templateUrl: './settings.page.html',\n    styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage {\n\n    private readonly settings: {\n        enablePush: boolean\n    } = {\n        enablePush: true,\n    };\n\n    private readonly user = this.userService.loadUser();\n    private readonly settings$ = this.settingsService.settings$.pipe(map(s => {\n        return {\n            ...s,\n            reminderPushNotification: {\n                ...s.reminderPushNotification,\n                time: (() => {\n                    const date = new Date();\n                    date.setHours(s.reminderPushNotification.time.hour);\n                    date.setMinutes(s.reminderPushNotification.time.minute);\n                    return date.toISOString();\n                })(),\n            },\n        };\n    }));\n\n    constructor(\n        private readonly userService: UserService,\n        private readonly settingsService: SettingsService,\n        private readonly notificationService: NotificationService,\n        private readonly toastController: ToastController,\n    ) {\n\n    }\n\n    private async copyUserIdToClipboard(userId: string) {\n        await Clipboard.write({\n            string: userId,\n        });\n\n        (await this.toastController.create({\n            position: 'top',\n            color: 'primary',\n            translucent: false,\n            message: 'Benutzer-ID kopiert',\n            duration: 2000,\n        })).present();\n    }\n\n    private async setReminderPushNotificationTime(time: string) {\n        if (this.settings.enablePush) {\n            const date = new Date(time);\n\n            this.settingsService.set('reminderPushNotification.time', {\n                hour: date.getHours(),\n                minute: date.getMinutes(),\n            });\n        }\n    }\n\n}\n"],"sourceRoot":"webpack:///"}