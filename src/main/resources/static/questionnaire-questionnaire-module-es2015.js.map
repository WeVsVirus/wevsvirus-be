{"version":3,"sources":["./src/app/questionnaire/form/form.component.ts","./src/app/questionnaire/form/form.component.html","./src/app/questionnaire/health/health.component.ts","./src/app/questionnaire/health/health.component.html","./src/app/questionnaire/questionnaire-routing.module.ts","./src/app/questionnaire/questionnaire.module.ts","./src/app/questionnaire/questionnaire.page.ts","./src/app/questionnaire/questionnaire.page.html","./src/app/services/question.service.ts","./src/app/services/questionnaire.service.ts"],"names":[],"mappings":"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","file":"questionnaire-questionnaire-module-es2015.js","sourcesContent":["import {Component, EventEmitter, Output, OnInit} from '@angular/core';\nimport {MoodQuestion, QuestionService} from '../../services/question.service';\n\n\n\n@Component({\n    selector: 'quest-form',\n    templateUrl: './form.component.html',\n    styleUrls: ['./form.component.scss'],\n})\nexport class QuestFormComponent implements OnInit {\n\n    public questions: MoodQuestion[] = [];\n\n    constructor(private readonly questionService: QuestionService) {\n    }\n\n    ngOnInit() {\n        this.questions = this.questionService.getAllMoodQuestions();\n    }\n\n    @Output()\n    public readonly onChange = new EventEmitter<MoodQuestion[]>();\n\n    onRangeChange(id: string, value: number) {\n        this.onChange.emit(this.questions.map(q => {\n            if (q.id === id) {\n                q.value = value;\n            }\n\n            return q;\n        }));\n    }\n\n}\n","<ion-grid>\n    <ion-row *ngFor=\"let q of questions\">\n        <ion-col size=\"12\">\n            <ion-item-divider>\n                <ion-label>\n                    {{q.question}}\n                </ion-label>\n            </ion-item-divider>\n        </ion-col>\n        <ion-col size=\"12\">\n            <ion-range color=\"danger\" pin=\"true\" (ionChange)=\"onRangeChange(q.id, $event.detail.value)\">\n                <ion-label slot=\"start\" class=\"emoji\">0️⃣</ion-label>\n                <ion-label slot=\"end\" class=\"emoji\">{{q.emoji}}</ion-label>\n            </ion-range>\n        </ion-col>\n    </ion-row>\n</ion-grid>\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {HealthQuestion, QuestionService} from '../../services/question.service';\n\n@Component({\n    selector: 'quest-health',\n    templateUrl: './health.component.html',\n    styleUrls: ['./health.component.scss'],\n})\nexport class QuestHealthComponent implements OnInit {\n\n    public questions: HealthQuestion[] = [];\n\n    constructor(private readonly questionService: QuestionService) {\n    }\n\n    @Output()\n    public readonly onChange = new EventEmitter<HealthQuestion[]>();\n\n    ngOnInit() {\n        this.questions = this.questionService.getAllHealthQuestions();\n    }\n\n    onRangeChange(slider, id: string, value: HealthQuestion['value']) {\n\n        const n = new Date(0, 0);\n        n.setMinutes(slider.value as number);\n\n        slider\n            .el.shadowRoot\n            .querySelector('.range-knob-handle .range-pin')\n            .innerHTML = n.toTimeString().slice(0, 5);\n\n        this.onChange.emit(this.questions.map(q => {\n            if (q.id === id) {\n                q.value = {\n                    hours: value as any,\n                    minutes: 0,\n                };\n            }\n\n            return q;\n        }));\n    }\n\n}\n","<ion-grid>\n    <ion-row *ngFor=\"let q of questions\">\n        <ion-col size=\"12\">\n            <ion-item-divider>\n                <ion-label>\n                    {{q.question}}\n                </ion-label>\n            </ion-item-divider>\n        </ion-col>\n        <ion-col size=\"12\">\n            <ion-range #slider color=\"danger\" pin=\"true\" [max]=\"1200\" [step]=\"15\" [snaps]=\"true\"\n                       (ionChange)=\"onRangeChange(slider, q.id, $event.detail.value)\">\n                <ion-label slot=\"start\" class=\"emoji\">0️⃣</ion-label>\n                <ion-label slot=\"end\" class=\"emoji\">{{q.emoji}}</ion-label>\n            </ion-range>\n        </ion-col>\n    </ion-row>\n</ion-grid>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QuestionnairePage } from './questionnaire.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QuestionnairePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class QuestionnairePageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {QuestionnairePageRoutingModule} from './questionnaire-routing.module';\n\nimport {QuestionnairePage} from './questionnaire.page';\nimport {QuestFormComponent} from './form/form.component';\nimport {QuestHealthComponent} from './health/health.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    QuestionnairePageRoutingModule\n  ],\n  declarations: [QuestionnairePage, QuestFormComponent, QuestHealthComponent]\n})\nexport class QuestionnairePageModule {}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {IQuestionnaire, QuestionnaireService} from '../services/questionnaire.service';\nimport {UserService} from '../services/user.service';\nimport {MoodQuestion, HealthQuestion} from '../services/question.service';\n\n@Component({\n    selector: 'app-questionnaire',\n    templateUrl: './questionnaire.page.html',\n    styleUrls: ['./questionnaire.page.scss'],\n})\nexport class QuestionnairePage implements OnInit {\n\n    private state: IQuestionnaire;\n\n    @Input()\n    public moode = true;\n\n    constructor(\n        private readonly userService: UserService,\n        private readonly questService: QuestionnaireService,\n    ) {\n    }\n\n    ngOnInit() {\n        this.state = {\n            userId: this.userService.user.id,\n            responseDate: new Date().toISOString().substring(0, 10),\n            moodResponses: [],\n            healthResponses: [],\n        };\n    }\n\n    async onMoodResponse(event: MoodQuestion[]) {\n        this.state.moodResponses = event.map(({id, value}) => ({\n            questionId: id,\n            response: value,\n        }));\n\n        await this.questService.save(this.state);\n    }\n\n    async onHealthResponse(event: HealthQuestion[]) {\n        this.state.healthResponses = event.map(({id, value}) => ({\n            questionId: id,\n            response: value,\n        }));\n\n        await this.questService.save(this.state);\n    }\n\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-title>questionnaire</ion-title>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n    <ion-grid>\n        <ion-col size=\"12\">\n            <ion-item>\n                <ion-label>Mood enabled:</ion-label>\n                <ion-toggle color=\"primary\" [(ngModel)]=\"moode\" [value]=\"'mood'\"></ion-toggle>\n            </ion-item>\n        </ion-col>\n    </ion-grid>\n\n    <ng-container [ngSwitch]=\"moode\">\n        <quest-form *ngSwitchCase=\"true\" (onChange)=\"onMoodResponse($event)\"></quest-form>\n        <quest-health *ngSwitchDefault=\"false\" (onChange)=\"onHealthResponse($event)\"></quest-health>\n    </ng-container>\n</ion-content>\n","import {Injectable} from '@angular/core';\n\nexport interface MoodQuestion {\n    id: string\n    question: string\n    emoji: string\n    value: number\n}\n\nexport interface HealthQuestion {\n    id: string\n    question: string\n    emoji: string\n    value: {\n        hours: number\n        minutes: number\n    }\n}\n\nconst moodQuestions: MoodQuestion[] = [{\n    id: '72eciMp5RMiA2u5dfwgtAX',\n    question: 'Wie gut geht es Dir?',\n    emoji: '🙂',\n    value: 0,\n}, {\n    id: 'oDHa9ZEb5KNChgmJ65fBx2',\n    question: 'Wie ängstlich fühlst Du Dich?',\n    emoji: '😳',\n    value: 0,\n}, {\n    id: 'rdjhVEbqnope4vL8MfAJ9Y',\n    question: 'Wie wütend bist Du?',\n    emoji: '😡',\n    value: 0,\n}, {\n    id: 'kcz8NZb2chFP1RiZdURTw2',\n    question: 'Wie einsam fühlst Du Dich?',\n    emoji: '🚶‍',\n    value: 0,\n}, {\n    id: 'o4uyZ9so3oiuAzspbH3YPf',\n    question: 'Wie gestresst fühlst Du Dich?',\n    emoji: '🤯',\n    value: 0,\n}, {\n    id: 'ggonDssvB639H2Bzbd4ac2',\n    question: 'Wie zufrieden bist Du?',\n    emoji: '😊',\n    value: 0,\n}];\n\nconst healthQuestions: HealthQuestion[] = [{\n    id: 'bJyjEuGz6VF3kwVxz7RQ8c',\n    question: 'Wie lange hast du geschlafen?',\n    emoji: '🌙',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: 'rPjhtwjTyfAQ433jVDHSvU',\n    question: 'Wie lange hast Du Dich heute über Corona informiert (Nachrichten, Social Media, TV..)',\n    emoji: '📰',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: '84rfLqZxi9X9Y8y9hQrLKB',\n    question: 'Wie lange hattest Du heute Kontakt zu Anderen (Telefon, Skype, persönlich)?',\n    emoji: '💬',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: 'vSvCia11kNsj43DVqiMNF9',\n    question: 'Wie lange warst Du heute an der frischen Luft?',\n    emoji: '🌤‍',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}, {\n    id: 'bJyjEuGz6VF3kwVxz7RQ8c',\n    question: 'Wie lange hast Du heute Sport gemacht?',\n    emoji: '💪',\n    value: {\n        hours: 0,\n        minutes: 0,\n    },\n}];\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class QuestionService {\n\n    constructor() {\n    }\n\n    getAllMoodQuestions = () => moodQuestions;\n    getAllHealthQuestions = () => healthQuestions;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\nexport interface IQuestionnaire {\n    userId: string\n    responseDate: string // 2020-03-20\n    moodResponses: {\n        questionId: string\n        response: number\n    }[],\n    healthResponses: {\n        questionId: string\n        response: {\n            hours: number\n            minutes: number\n        }\n    }[]\n}\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class QuestionnaireService {\n\n    private readonly baseUrl = `http://${window.location.hostname}:8080`;\n\n    constructor(private http: HttpClient) {\n    }\n\n    async save(questionnaire: IQuestionnaire): Promise<IQuestionnaire> {\n        await this.http.post<IQuestionnaire>(this.baseUrl + '/questionnaire', questionnaire).toPromise();\n        return questionnaire\n    }\n}\n"],"sourceRoot":"webpack:///"}